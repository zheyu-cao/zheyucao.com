---
import SubPageLayout from "../layouts/SubPageLayout.astro";
import TimelineEvent from "../components/timeline/TimelineEvent.astro";
import { allTimelineEvents } from "../data/timelineEvents";
import "../styles/timeline.css";

// Use the imported data
const allEvents = allTimelineEvents;

// Calculate unique categories based on actual data
const categories = [...new Set(allEvents.map((event) => event.category).filter(Boolean))].sort();

// Initial sort for SSR
let initialSortOrder = "newest"; // Default
let initialFilteredEvents = allTimelineEvents.sort((a, b) =>
  initialSortOrder === "newest"
    ? new Date(b.date).getTime() - new Date(a.date).getTime()
    : new Date(a.date).getTime() - new Date(b.date).getTime()
);

// Remove placeholder/unused variable definitions
// const TimelineEvent = ... (If component not used for SSR)
// const processedEvents = ...
---

<SubPageLayout title="Timeline">
  <div class="timeline-controls">
    <div class="control-group category-tabs">
      <button type="button" class="category-tab" data-category="all" aria-pressed="true">All</button
      >
      {
        categories.map((cat) => (
          <button type="button" class="category-tab" data-category={cat}>
            {cat}
          </button>
        ))
      }
    </div>
    <!-- <div class="control-group">
      <button type="button" id="sort-toggle" data-sort-current="newest">Newest First</button>
    </div> -->
  </div>

  <ul class="timeline-container mt-8">
    {/* Initial server-side render */}
    {
      initialFilteredEvents.map((event, index) => (
        <TimelineEvent
          date={event.date}
          dateRange={event.dateRange}
          title={event.title}
          description={event.description}
          category={event.category}
          isLast={index === initialFilteredEvents.length - 1}
        />
      ))
    }
  </ul>
</SubPageLayout>

{/* Pass data to client script */}
<script define:vars={{ allEvents }}>
  // console.log("[Timeline Script] Executing script block."); // Log 1: Script execution start

  // State variables
  let currentFilter = "all";
  let currentSort = "newest"; // 'newest' or 'oldest'

  // DOM References (potential issue if run before DOM ready on navigation)
  // We will re-query these inside astro:page-load
  // const categoryTabs = document.querySelectorAll(".category-tab");
  // const sortToggleButton = document.getElementById("sort-toggle");
  // const timelineContainer = document.querySelector(".timeline-container");
  let categoryTabs = null; // Initialize as null
  let sortToggleButton = null;
  let timelineContainer = null;
  const allEventsData = allEvents; // Get data passed from server

  // console.log("[Timeline Script] Script block executed, waiting for astro:page-load."); // Log: Script block done

  // Helper to format YYYY-MM to Month Year
  function formatTimelineDate(dateStr) {
    if (!dateStr || !dateStr.includes("-")) return dateStr; // Return original if invalid
    const [year, month] = dateStr.split("-");
    const dateObj = new Date(parseInt(year), parseInt(month) - 1); // Month is 0-indexed
    return dateObj.toLocaleString("en-US", { month: "long", year: "numeric" });
  }

  async function renderTimeline() {
    // console.log(
    //   `[Timeline Script] renderTimeline START - Filter: ${currentFilter}, Sort: ${currentSort}`
    // ); // Log 5: renderTimeline start
    // Ensure container is valid (queried in astro:page-load)
    if (!timelineContainer || !allEventsData) {
      console.warn(
        "[Timeline Script] renderTimeline ABORT - Missing container or data. Container:", // Keep important warning
        timelineContainer
      );
      return;
    }

    // 1. Add fade-out class
    timelineContainer.classList.add("is-updating");

    // Wait for CSS transition
    await new Promise((resolve) => setTimeout(resolve, 300));

    // 2. Filter
    let filteredEvents = allEventsData;
    if (currentFilter !== "all") {
      filteredEvents = allEventsData.filter((event) => event.category === currentFilter);
    }

    // 3. Sort
    filteredEvents.sort((a, b) => {
      // Ensure date comparison handles potential non-standard formats robustly
      const dateA = new Date(a.date.includes("-") ? a.date : `${a.date}-01-01`); // Assume year if no month/day
      const dateB = new Date(b.date.includes("-") ? b.date : `${b.date}-01-01`);
      // Fallback to 0 if dates are invalid
      const timeA = isNaN(dateA.getTime()) ? 0 : dateA.getTime();
      const timeB = isNaN(dateB.getTime()) ? 0 : dateB.getTime();

      return currentSort === "newest" ? timeB - timeA : timeA - timeB;
    });

    // 4. Generate HTML
    let timelineHTML = "";
    filteredEvents.forEach((event, index) => {
      const isLast = index === filteredEvents.length - 1;
      const displayDate = event.dateRange ? event.dateRange : formatTimelineDate(event.date);
      const descriptionHTML = event.description
        ? `<div class="timeline-description">${event.description}</div>`
        : "";

      timelineHTML += `
        <li class="timeline-event ${isLast ? "is-last" : ""}">
          <div class="timeline-marker"></div>
          <div class="timeline-content">
            <div class="timeline-header">
              <span class="timeline-date">${displayDate}</span>
              <h3 class="timeline-title">${event.title}</h3>
              <!-- ${event.category ? `<span class="timeline-category">${event.category}</span>` : ""} -->
            </div>
            ${descriptionHTML}
          </div>
        </li>
      `;
    });

    // 5. Update DOM
    timelineContainer.innerHTML = timelineHTML;

    // 6. Remove fade-out class
    timelineContainer.classList.remove("is-updating");
    // console.log(`[Timeline Script] renderTimeline END - DOM updated.`); // Log 5: renderTimeline end

    // 7. Dispatch event to re-initialize footer animation
    function reinitFooterAnimation() {
      // console.log("[Timeline Script] Dispatching refresh-footer-animation event after transition"); // Removed log
      document.dispatchEvent(new CustomEvent("refresh-footer-animation"));
    }
    // Use a flag to prevent adding multiple listeners if renderTimeline is called rapidly
    if (!timelineContainer.hasAttribute("data-transition-listener-added")) {
      const handleTransitionEnd = (event) => {
        if (event.target === timelineContainer && event.propertyName === "opacity") {
          reinitFooterAnimation();
          // Clean up listener and flag
          timelineContainer.removeEventListener("transitionend", handleTransitionEnd);
          timelineContainer.removeAttribute("data-transition-listener-added");
          // console.log("[Timeline Script] TransitionEnd listener removed."); // Removed log
        }
      };
      timelineContainer.addEventListener("transitionend", handleTransitionEnd);
      timelineContainer.setAttribute("data-transition-listener-added", "true"); // Set flag
      // console.log("[Timeline Script] TransitionEnd listener added."); // Removed log
    }
  }

  // Define handler function outside for potential removal (though Astro lifecycle handles this better)
  const handleCategoryClick = async (e) => {
    // console.log("[Timeline Script] Category tab clicked!", e.currentTarget); // Log 4: Click handler start
    if (e.currentTarget instanceof HTMLElement) {
      const target = e.currentTarget;
      const category = target.dataset.category;
      // console.log(
      //   `[Timeline Script] Clicked category: ${category}, Current filter: ${currentFilter}`
      // ); // Log 4: Category info
      if (category && category !== currentFilter) {
        currentFilter = category;
        updateCategoryTabStates(); // Update immediately
        // console.log("[Timeline Script] Calling renderTimeline from tab click."); // Log 4: Calling render
        await renderTimeline();
      } else {
        // console.log("[Timeline Script] Click ignored - category same or invalid."); // Log 4: Click ignored
      }
    }
  };

  // --- Event Listeners Setup (called within astro:page-load) ---
  function setupEventListeners() {
    // console.log("[Timeline Script] Setting up event listeners..."); // Removed log
    if (!categoryTabs) {
      console.error("[Timeline Script] Cannot setup listeners: categoryTabs not found."); // Keep error
      return;
    }
    categoryTabs.forEach((tab) => {
      if (!(tab instanceof HTMLElement)) return;
      // Remove listener first (important for astro:page-load)
      tab.removeEventListener("click", handleCategoryClick);
      // Add the listener
      tab.addEventListener("click", handleCategoryClick);
      // console.log(`[Timeline Script] Added click listener to tab ${index + 1}:`, tab); // Removed log
    });

    // Setup sort toggle listener (if element exists)
    if (sortToggleButton) {
      // Define handler
      const handleSortClick = async () => {
        // console.log("[Timeline Script] Sort toggle clicked!"); // Removed log
        const previousSort = currentSort;
        currentSort = currentSort === "newest" ? "oldest" : "newest";
        if (previousSort !== currentSort) {
          updateSortToggleState(); // Update UI
          // console.log("[Timeline Script] Calling renderTimeline from sort click."); // Removed log
          await renderTimeline();
        }
      };
      // Remove previous listener & add new one
      sortToggleButton.removeEventListener("click", handleSortClick);
      sortToggleButton.addEventListener("click", handleSortClick);
      // console.log("[Timeline Script] Added click listener to sort toggle."); // Removed log
    } else {
      // console.log("[Timeline Script] Sort toggle button not found, skipping listener."); // Removed log
    }
    // console.log("[Timeline Script] Event listeners setup complete."); // Removed log
  }

  // --- Helper for Control States ---
  function updateCategoryTabStates() {
    if (!categoryTabs) return; // Guard against null
    // console.log(`[Timeline Script] Updating category tab states. Active: ${currentFilter}`); // Removed log
    categoryTabs.forEach((tab) => {
      if (!(tab instanceof HTMLElement)) return;
      if (tab.dataset.category === currentFilter) {
        tab.setAttribute("aria-pressed", "true");
      } else {
        tab.removeAttribute("aria-pressed");
      }
    });
  }

  function updateSortToggleState() {
    if (!sortToggleButton) return; // Guard against null
    // console.log(`[Timeline Script] Updating sort toggle state. Current: ${currentSort}`); // Removed log
    sortToggleButton.dataset.sortCurrent = currentSort;
    sortToggleButton.textContent = currentSort === "newest" ? "Newest First" : "Oldest First";
  }

  // --- Initialization Logic (called within astro:page-load) ---
  function initializeTimeline() {
    // console.log("[Timeline Script] initializeTimeline START"); // Log 2: Initialize start

    // Query DOM elements *inside* initialization, as they might change with VT
    categoryTabs = document.querySelectorAll(".category-tab");
    sortToggleButton = document.getElementById("sort-toggle");
    timelineContainer = document.querySelector(".timeline-container");

    // console.log(
    //   `[Timeline Script] DOM Refs queried: categoryTabs=${categoryTabs?.length}, sortToggle=${!!sortToggleButton}, container=${!!timelineContainer}`
    // ); // Removed log

    if (!timelineContainer || !categoryTabs || categoryTabs.length === 0) {
      console.error(
        "[Timeline Script] initializeTimeline ABORT - Essential elements not found in DOM." // Keep error
      );
      return;
    }

    // Set initial state based on what's rendered (or defaults)
    // Note: The initial state might need smarter logic if SSR state needs to be preserved across navigation
    currentFilter = "all"; // Reset to default or read from persisted state if implemented
    currentSort = "newest"; // Reset to default

    // Render based on initial state (will also update tab/button UI via helpers)
    renderTimeline(); // Initial render based on default/reset state
    updateCategoryTabStates(); // Ensure UI matches state
    updateSortToggleState(); // Ensure UI matches state
    setupEventListeners(); // Setup listeners *after* initial state & render

    // console.log("[Timeline Script] initializeTimeline END"); // Log 2: Initialize end
  }

  // --- Astro Lifecycle Integration ---
  document.addEventListener("astro:page-load", () => {
    // console.log("[Timeline Script] astro:page-load event fired."); // Removed log
    // Reset filter/sort state on navigation? Or try to persist? For now, reset.
    // currentFilter = "all"; // State reset is now handled inside initializeTimeline
    // currentSort = "newest";
    // console.log("[Timeline Script] State reset on page load."); // Removed log
    initializeTimeline(); // Run the initialization logic on every page load
  });

  // Initial load handling (for non-VT initial visit)
  // astro:page-load also fires on initial load, so this might be redundant
  // but let's keep it simple and rely only on astro:page-load
  // console.log(
  //   "[Timeline Script] Script loaded. Initialization will occur on astro:page-load event."
  // ); // Removed log
</script>

<style>
  .timeline-controls {
    margin-bottom: 3rem;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: center;
  }
  .control-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
    align-items: center;
  }
  .control-group label {
    font-weight: 500;
    margin-right: 0.5rem;
    color: var(--text-muted);
  }

  .controls-note {
    font-size: 0.85rem;
    color: var(--text-muted);
    width: 100%;
    text-align: right;
    margin: 0.5rem 0 0;
  }

  .timeline-container {
    padding: 0;
    margin: 0;
    /* No specific layout needed here, handled by list items */
  }

  /* Category Tabs Styling */
  .category-tabs {
    gap: 0.5rem 0rem;
    font-family: var(--font-family-sans);
  }
  .category-tab {
    font-family: inherit;
    font-size: 1rem;
    padding: 0.5em 1em 0.8em;
    border: none;
    border-bottom-width: 3px;
    border-bottom-style: solid;
    border-bottom-color: transparent;
    background-color: transparent;
    color: var(--text-muted);
    cursor: pointer;
    transition: all 0.2s ease;
    margin-bottom: -1px;
  }
  .category-tab:hover {
    border-bottom-color: var(--button-border-color);
    color: var(--text-color);
  }
  .category-tab[aria-pressed="true"] {
    border-bottom-color: var(--button-border-hover-color);
    color: var(--text-color);
    font-weight: 600;
  }

  #sort-toggle {
    font-family: inherit;
    font-size: 0.9rem;
    padding: 0.4em 0.9em;
    border-radius: 6px;
    border: 1px solid var(--button-border-hover-color);
    background-color: var(--button-hover-bg);
    color: var(--button-hover-text);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  #sort-toggle:hover {
    border-color: var(--button-border-color);
    background-color: transparent;
    color: var(--text-muted);
  }

  /* Added Animation Styles */
  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .timeline-container {
    /* Add transition for smoother effect when class is removed */
    transition: opacity 0.3s ease-out;
    /* padding/margin already exist */
    padding: 0;
    margin: 0;
  }

  .timeline-container.is-updating {
    opacity: 0;
    /* You could use animation instead if preferred */
    /* animation: fadeOut 0.3s ease-out forwards; */
  }

  /* Consider users who prefer reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .timeline-container,
    .timeline-container.is-updating {
      transition: none;
      animation: none;
      opacity: 1; /* Ensure it's always visible */
    }
  }
</style>
