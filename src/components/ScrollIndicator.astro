---
// Component: src/components/ScrollIndicator.astro
---

<div id="scroll-indicator" class="scroll-indicator">
  <div class="indicator-content">
    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M7 10L12 15L17 10"
        stroke="currentColor"
        stroke-width="1"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </div>
</div>

<style>
  @keyframes float {
    0% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-8px);
    }
    100% {
      transform: translateY(0px);
    }
  }

  .scroll-indicator {
    position: fixed;
    bottom: 50px;
    left: 50%;
    transform: translateX(-50%);
    color: inherit;
    opacity: 0;
    cursor: pointer;
    z-index: 10;
    transition: opacity 0.5s ease-out;
  }

  .indicator-content {
    display: flex;
    align-items: center;
    gap: 0em;
    animation: float 3s ease-in-out infinite;
  }

  .scroll-indicator svg {
    display: block;
    margin-bottom: 2px;
  }

  .scroll-indicator.visible {
    opacity: 0.6;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const indicator = document.querySelector("#scroll-indicator");
  const pageWrapper = document.querySelector(".page-wrapper");

  if (indicator && pageWrapper) {
    let fadeInTimeout: number | null = null;
    let isVisible = false; // Track the intended visibility state

    const showIndicator = (delay = 0) => {
      if (isVisible) return; // Already visible or scheduled to be
      // Clear previous timeout (check for null)
      if (fadeInTimeout !== null) {
        clearTimeout(fadeInTimeout);
      }
      fadeInTimeout = setTimeout(() => {
        gsap.to(indicator, { opacity: 0.6, duration: 0.5, overwrite: true });
        isVisible = true;
      }, delay);
    };

    const hideIndicator = () => {
      // Cancel any pending show (check for null)
      if (fadeInTimeout !== null) {
        clearTimeout(fadeInTimeout);
      }
      gsap.to(indicator, { opacity: 0, duration: 0.3, overwrite: true });
      isVisible = false;
    };

    // Initial Setup
    gsap.set(indicator, { opacity: 0 }); // Start hidden
    isVisible = false;

    // Check initial scroll position
    if (pageWrapper.scrollTop < 10) {
      showIndicator(3000); // If at top, schedule delayed show
    }

    // ScrollTrigger to manage visibility based on scroll
    ScrollTrigger.create({
      trigger: pageWrapper,
      scroller: pageWrapper,
      start: "10px top", // Trigger 10px away from the top
      end: "bottom bottom", // Keep trigger active until bottom
      // When scrolling DOWN past the start point
      onEnter: () => {
        console.log("Scrolled away from top: Hiding indicator");
        hideIndicator();
      },
      // When scrolling UP back past the start point (to the top)
      onLeaveBack: () => {
        console.log("Scrolled back to top: Scheduling indicator show");
        // Check again in case of quick scroll-back
        if (pageWrapper.scrollTop < 10) {
          showIndicator(3000);
        }
      },
      // Optional: Trigger on refresh if already past start point
      // Might be needed depending on exact ScrollTrigger behavior on load
      // onUpdate: (self) => {
      //    if (self.isActive && pageWrapper.scrollTop >= 10 && !isVisible) {
      // If trigger is active on load and we are scrolled down, ensure hidden
      //       hideIndicator();
      //    }
      // },
      // markers: true // For debugging
    });
  }
</script>
