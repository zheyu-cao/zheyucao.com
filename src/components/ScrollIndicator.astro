---
// Component: src/components/ScrollIndicator.astro
---

<div id="scroll-indicator" class="scroll-indicator">
  <div class="indicator-content">
    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M7 10L12 15L17 10"
        stroke="currentColor"
        stroke-width="1"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </div>
</div>

<style>
  @keyframes float {
    0% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-8px);
    }
    100% {
      transform: translateY(0px);
    }
  }

  .scroll-indicator {
    position: fixed;
    bottom: 50px;
    left: 50%;
    /* transform: translateX(-50%) translateZ(0); */ /* Remove layer promotion */
    transform: translateX(-50%);
    /* will-change: transform, opacity; */ /* Remove will-change */
    color: var(--text-color);
    opacity: 0;
    cursor: pointer;
    z-index: 10;
    transition: opacity 0.5s ease-out;
  }

  .indicator-content {
    display: flex;
    align-items: center;
    gap: 0em;
    /* animation: float 3s ease-in-out infinite; */ /* Temporarily disable float animation */
    animation: float 3s ease-in-out infinite; /* Restore float animation */
  }

  .scroll-indicator svg {
    display: block;
    margin-bottom: 2px;
  }

  .scroll-indicator.visible {
    opacity: 0.6;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  let indicatorScrubTrigger: ScrollTrigger | null = null;
  let indicatorCallbackTrigger: ScrollTrigger | null = null;
  let fadeInTimeout: ReturnType<typeof setTimeout> | null = null;

  function setupIndicatorAnimation() {
    // Ensure plugin is registered
    gsap.registerPlugin(ScrollTrigger);

    const indicator = document.querySelector("#scroll-indicator");
    const pageWrapper = document.querySelector(".page-wrapper");

    if (indicator && pageWrapper) {
      // Kill previous instances if they exist
      if (indicatorScrubTrigger) {
        indicatorScrubTrigger.kill();
        indicatorScrubTrigger = null;
        console.log("Killed previous indicator Scrub Trigger");
      }
      if (indicatorCallbackTrigger) {
        indicatorCallbackTrigger.kill();
        indicatorCallbackTrigger = null;
        console.log("Killed previous indicator Callback Trigger");
      }

      // Scroll-based fade-out using ScrollTrigger (Scrub)
      const animation = gsap.fromTo(
        indicator,
        { opacity: 0.6 },
        { opacity: 0, immediateRender: false }
      );
      indicatorScrubTrigger = ScrollTrigger.create({
        trigger: pageWrapper,
        scroller: pageWrapper,
        start: "10px top",
        end: "+=150",
        animation: animation,
        scrub: 0.5,
        // markers: true // For debugging scrub
      });
      console.log("Setup new indicator Scrub Trigger");

      // Re-introduce the 3-sec fade-in logic + show/hide callbacks
      const showIndicator = (delay = 0) => {
        // Prevent scheduling if scrub trigger is active (i.e., user has scrolled down)
        if (indicatorScrubTrigger?.isActive) return;
        // Check if timeout exists before clearing
        if (fadeInTimeout !== null) {
          clearTimeout(fadeInTimeout);
        }
        fadeInTimeout = setTimeout(() => {
          if (pageWrapper.scrollTop < 10) {
            gsap.to(indicator, { opacity: 0.6, duration: 0.5, overwrite: true });
          }
        }, delay);
      };

      const hideIndicator = () => {
        // Check if timeout exists before clearing
        if (fadeInTimeout !== null) {
          clearTimeout(fadeInTimeout);
        }
        // Don't force hide if the scrub animation is controlling opacity
        if (!indicatorScrubTrigger?.isActive) {
          gsap.to(indicator, { opacity: 0, duration: 0.3, overwrite: true });
        }
      };

      gsap.set(indicator, { opacity: 0 });
      if (pageWrapper.scrollTop < 10) {
        showIndicator(3000);
      }

      // Setup callbacks trigger
      indicatorCallbackTrigger = ScrollTrigger.create({
        trigger: pageWrapper,
        scroller: pageWrapper,
        start: "10px top",
        onEnter: hideIndicator, // Hide when scrolling down past 10px
        onLeaveBack: () => {
          // When scrolling back to top
          if (pageWrapper.scrollTop < 10) {
            showIndicator(3000); // Reschedule show
          }
        },
        // markers: {startColor: "green", endColor: "red", indent: 50}, // For debugging callbacks
      });
      console.log("Setup new indicator Callback Trigger");

      // --- Add Click Listener for Scrolling ---
      // Re-confirm indicator exists to satisfy potential linter issues
      if (indicator) {
        indicator.addEventListener("click", () => {
          const currentOpacity = parseFloat(window.getComputedStyle(indicator).opacity);
          if (currentOpacity > 0.1) {
            window.scrollBy({
              top: window.innerHeight,
              left: 0,
              behavior: "smooth",
            });
          }
        });
        console.log("Added click listener to scroll indicator");
      }
      // --- End Add Click Listener ---
    } else {
      console.warn("Indicator animation setup skipped: elements not found.");
    }
  }

  // Main event listener
  document.addEventListener(
    "astro:page-load",
    () => {
      // Run the animation setup first
      setupIndicatorAnimation();

      // Now, separately set up the click listener
      const indicatorForClick = document.querySelector("#scroll-indicator");
      const pageWrapper = document.querySelector(".page-wrapper"); // Get the scroll container

      if (indicatorForClick && pageWrapper) {
        // Make sure both exist
        console.log("[ClickScroll] Attaching click listener to indicator."); // Debug log
        indicatorForClick.addEventListener("click", () => {
          console.log("[ClickScroll] Scroll indicator clicked!"); // Debug log
          const currentOpacity = parseFloat(window.getComputedStyle(indicatorForClick).opacity);
          console.log("[ClickScroll] Current Opacity:", currentOpacity); // Debug log

          if (currentOpacity > 0.1) {
            // Check opacity
            console.log("[ClickScroll] Scrolling page wrapper..."); // Debug log
            pageWrapper.scrollBy({
              // Scroll the pageWrapper
              top: pageWrapper.clientHeight, // Scroll by its own height
              left: 0,
              behavior: "smooth",
            });
          } else {
            console.log("[ClickScroll] Scroll aborted due to low opacity."); // Debug log
          }
        });
      } else {
        if (!indicatorForClick)
          console.warn(
            "[ClickScroll] Indicator element (#scroll-indicator) not found for click listener."
          );
        if (!pageWrapper)
          console.warn(
            "[ClickScroll] Page wrapper element (.page-wrapper) not found for scrolling."
          ); // Added specific warning
      }
    },
    { once: false }
  );
</script>
