---
// Component: src/components/ScrollIndicator.astro
---

<div id="scroll-indicator" class="scroll-indicator">
  <div class="indicator-content">
    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M7 10L12 15L17 10"
        stroke="currentColor"
        stroke-width="1"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </div>
</div>

<style>
  @keyframes float {
    0% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-8px);
    }
    100% {
      transform: translateY(0px);
    }
  }

  .scroll-indicator {
    position: fixed;
    bottom: 50px;
    left: 50%;
    transform: translateX(-50%);
    color: inherit;
    opacity: 0;
    cursor: pointer;
    z-index: 10;
    transition: opacity 0.5s ease-out;
  }

  .indicator-content {
    display: flex;
    align-items: center;
    gap: 0em;
    animation: float 3s ease-in-out infinite;
  }

  .scroll-indicator svg {
    display: block;
    margin-bottom: 2px;
  }

  .scroll-indicator.visible {
    opacity: 0.6;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const indicator = document.querySelector("#scroll-indicator");
  const pageWrapper = document.querySelector(".page-wrapper");

  if (indicator && pageWrapper) {
    let fadeInTimeout: number | null = null; // Variable to hold the timeout ID

    // Function to schedule the fade-in
    const scheduleFadeIn = () => {
      // Clear any existing timeout first
      if (fadeInTimeout) clearTimeout(fadeInTimeout);

      fadeInTimeout = setTimeout(() => {
        // Only fade in if still at the very top
        if (pageWrapper.scrollTop < 10) {
          gsap.to(indicator, { opacity: 0.6, duration: 0.5, overwrite: true });
        }
        fadeInTimeout = null;
      }, 3000); // 3-second delay
    };

    // Initial setup
    gsap.set(indicator, { opacity: 0 }); // Ensure start hidden
    scheduleFadeIn(); // Schedule the first fade-in attempt

    // Scroll-based fade-out using ScrollTrigger
    ScrollTrigger.create({
      trigger: pageWrapper,
      scroller: pageWrapper,
      start: "top top",
      end: "+=150", // Fade out over 150px
      animation: gsap.fromTo(
        indicator,
        { opacity: 0.6 }, // State to animate from (when active)
        { opacity: 0, immediateRender: false } // State to animate to
      ),
      scrub: 0.5, // Smooth scrubbing
      onEnter: () => {
        // User started scrolling down, cancel any pending fade-in
        if (fadeInTimeout) {
          clearTimeout(fadeInTimeout);
          fadeInTimeout = null;
        }
      },
      onLeaveBack: () => {
        // User scrolled back to the very top
        gsap.set(indicator, { opacity: 0, overwrite: true }); // Hide immediately
        // Optional: Reschedule fade-in if desired after returning to top
        // scheduleFadeIn();
      },
    });
  }
</script>
