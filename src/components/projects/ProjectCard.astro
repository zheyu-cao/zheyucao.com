---
import { Icon } from "astro-icon/components";

interface Props {
  title: string;
  imageSrc?: string;
  imageAlt?: string;
  timeframe?: string;
  projectUrl?: string;
  githubUrl?: string;
  techStack?: string[];
}

const {
  title,
  imageSrc,
  imageAlt = "Project thumbnail", // Default alt text
  timeframe,
  projectUrl,
  githubUrl,
  techStack = [],
} = Astro.props;
---

<article class="project-card">
  {
    imageSrc && (
      <div class="project-image-wrapper">
        <img src={imageSrc} alt={imageAlt} class="project-image" loading="lazy" />
      </div>
    )
  }
  <div class="project-content">
    <header class="project-header">
      <h3 class="project-title">{title}</h3>
    </header>

    <div class="project-metadata">
      {timeframe && <span class="project-timeframe">{timeframe}</span>}
      {
        techStack.length > 0 && (
          <div class="project-tech-stack">
            {techStack.map((tech) => (
              <span class="tech-tag">{tech}</span>
            ))}
          </div>
        )
      }
      <div class="project-links">
        {
          githubUrl && (
            <a
              href={githubUrl}
              target="_blank"
              rel="noopener noreferrer"
              title="View source on GitHub"
            >
              <Icon name="ri:github-line" /> GitHub
            </a>
          )
        }
        {
          projectUrl && (
            <a href={projectUrl} target="_blank" rel="noopener noreferrer" title="Visit live site">
              <Icon name="ri:external-link-line" /> Live Site
            </a>
          )
        }
      </div>
    </div>

    <div class="project-body">
      <slot />
    </div>
  </div>
</article>

<style>
  .project-card {
    border-radius: 8px;
    border: 1px solid var(--card-border-color);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: all 0.2s ease-out;
    margin-bottom: 3rem; /* Space below card */

    /* Initial state */
    opacity: 0;
    filter: blur(5px);
    transform: translateY(20px) translateZ(0);
    will-change: opacity, filter, transform, border-color, backdrop-filter;
    /* Transition applied when .visible is added */
    transition:
      opacity 0.8s ease-out,
      filter 0.8s ease-out,
      transform 0.8s ease-out,
      border-color 0.2s ease,
      backdrop-filter 0.2s ease;
  }

  .project-card.visible {
    /* Final state */
    opacity: 1;
    filter: blur(0px);
    transform: translateY(0) translateZ(0);
  }

  .project-card:hover {
    border-color: var(--card-border-hover-color);
    backdrop-filter: brightness(1.1) saturate(1.1);
  }

  .project-image-wrapper {
    aspect-ratio: 16 / 9; /* Force aspect ratio */
    overflow: hidden;
    background-color: var(--bg-muted); /* Placeholder bg */
  }
  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover; /* Cover the area, cropping if needed */
    object-position: top;
    display: block;
  }

  .project-content {
    padding: 2rem; /* Increased padding inside card */
    display: flex;
    flex-direction: column;
    flex-grow: 1; /* Allow content to fill remaining space */
  }

  .project-header {
    margin-bottom: 1rem; /* Space below title */
  }
  .project-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
    color: var(--heading-color);
    line-height: 1.3;
  }

  .project-metadata {
    margin-bottom: 1.5rem; /* Reduced space below metadata */
    display: flex;
    flex-direction: column;
    gap: 0.8rem; /* Reduced vertical gap between items */
    font-family: var(--font-family-sans); /* Apply sans-serif font */
  }

  .project-timeframe {
    font-size: 0.9rem; /* Slightly smaller timeframe */
    color: var(--text-muted);
    display: block;
    font-family: inherit; /* Inherit sans-serif from parent */
  }

  .project-tech-stack {
    display: flex;
    flex-wrap: wrap;
    gap: 0.4rem; /* Reduced gap between tags */
    font-family: inherit; /* Inherit sans-serif from parent */
    line-height: 1.4; /* Adjusted line height */
    padding: 0.2em 0;
  }

  .tech-tag {
    background-color: var(--tag-bg-color);
    color: var(--tag-text-color);
    font-size: 0.85rem; /* Keep tags slightly smaller */
    border-radius: 4px;
    font-family: inherit; /* Inherit sans-serif from parent */
  }

  .project-links {
    display: flex;
    flex-wrap: wrap;
    gap: 1.2rem; /* Slightly reduced gap */
    align-items: center;
    font-family: inherit; /* Inherit sans-serif from parent */
  }
  .project-links a {
    color: var(--link-color);
    text-decoration: none;
    font-size: 0.9rem; /* Align size with timeframe */
    display: inline-flex;
    align-items: center;
    gap: 0.4em;
    transition: color 0.2s ease;
    font-family: inherit; /* Inherit sans-serif from parent */
  }
  .project-links a:hover {
    color: var(--link-hover-color);
    text-decoration: underline;
  }
  .project-links :global(svg) {
    font-size: 1.2em;
  }

  .project-body {
    font-size: 1.1rem;
    line-height: 1.8;
    flex-grow: 1;
  }
  .project-body :global(p) {
    margin-bottom: 1em;
  }
  .project-body :global(ul) {
    padding-left: 1.5em;
    margin-top: 0.5em;
    list-style: disc;
  }
</style>

<script>
  let currentIntersectionObserver: IntersectionObserver | null = null; // Added type annotation

  document.addEventListener("astro:page-load", () => {
    // 1. Disconnect old observer if it exists
    if (currentIntersectionObserver) {
      currentIntersectionObserver.disconnect();
    }

    // 2. Set up the new observer for the current page
    const pageWrapper = document.querySelector(".page-wrapper");
    if (!pageWrapper) {
      console.error("Page wrapper element not found for IntersectionObserver.");
      return;
    }
    const observerOptions = {
      root: pageWrapper, // Observe intersections within the page-wrapper
      rootMargin: "0px",
      threshold: 0.2,
    };

    const observerCallback = (entries, observer) => {
      entries.forEach((entry) => {
        // console.log("Observing:", entry.target, "Is intersecting:", entry.isIntersecting); // Removed debug log
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.unobserve(entry.target);
        }
      });
    };

    const newObserver = new IntersectionObserver(observerCallback, observerOptions);

    // 3. Store the new observer instance
    currentIntersectionObserver = newObserver;

    // 4. Find and observe targets *on the current page*
    const targets = document.querySelectorAll(".project-card"); // Corrected selector was applied previously
    targets.forEach((target) => newObserver.observe(target));

    // console.log(`[ScrollReveal] Observer set up for ${targets.length} targets on page load.`);
  });
</script>
