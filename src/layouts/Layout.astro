---
import { ClientRouter } from "astro:transitions";
import DynamicBackground from "../components/DynamicBackground.astro";
import ScrollIndicator from "../components/ScrollIndicator.astro";
import Footer from "../components/Footer.astro";

// Define props interface and get the title prop
interface Props {
  title?: string; // Optional title prop
}
const { title } = Astro.props;

// Set a default title if none is provided
const pageTitle = `${title || "Homepage"} | Zheyu Cao`;

// Determine if the scroll indicator should be shown (only on homepage)
const currentPath = Astro.url.pathname;
const showScrollIndicator = currentPath === "/";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <ClientRouter />
    <!-- START Insert Theme Detection Script Here -->
    <script is:inline>
      // Simplified: Only check system preference
      const isDarkMode =
        window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
      if (isDarkMode) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    </script>
    <!-- END Insert Theme Detection Script Here -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap"
      rel="stylesheet"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="page-wrapper">
      <DynamicBackground />
      <main class="main-content">
        <slot />
      </main>
      <Footer />
      {/* Conditionally render ScrollIndicator */}
      {showScrollIndicator && <ScrollIndicator />}
    </div>
  </body><script>
    const pageWrapper = document.querySelector(".page-wrapper");

    const observerOptions = {
      root: pageWrapper, // Observe intersections within the page-wrapper
      rootMargin: "0px",
      threshold: 0.1,
    };

    const observerCallback = (entries, observer) => {
      entries.forEach((entry) => {
        // console.log("Observing:", entry.target, "Is intersecting:", entry.isIntersecting); // Removed debug log
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.unobserve(entry.target);
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);

    const targets = document.querySelectorAll(".scroll-animate");
    // Ensure pageWrapper exists before observing
    if (pageWrapper) {
      targets.forEach((target) => observer.observe(target));
    } else {
      console.error("Page wrapper element not found for IntersectionObserver.");
    }
  </script>
  <!-- System Theme Handling -->
  <script>
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");

    // Function to apply the theme class based on query match
    const checkAndApplyTheme = () => {
      if (mediaQuery.matches) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
      console.log(
        "[Theme] Applied theme based on prefers-color-scheme:",
        mediaQuery.matches ? "dark" : "light"
      ); // Debug log
    };

    // Listener for live theme changes
    mediaQuery.addEventListener("change", checkAndApplyTheme);

    // Listener to re-apply theme after client-side navigation
    document.addEventListener("astro:page-load", checkAndApplyTheme);

    // Optional: Apply on initial script load for non-Astro SPA navigators?
    // The inline script should handle the very first load.
    // checkAndApplyTheme();
  </script>
</html>

<style>
  :root {
    /* Light Theme (Default) */
    --bg-color: #ffffff;
    --text-color: #2e2e2e;
    --text-muted: #555555;
    --footer-bg: #f8f9faaa; /* Light footer */
    --footer-text: #343a40;
    --footer-heading: #212529;
    --footer-link: #384044;
    --footer-link-hover: #212529;
    --footer-copyright: #6c757d;
    --dynamic-bg-opacity: 0.5; /* Lighter opacity for light theme */

    --font-family-serif: "EB Garamond", Garamond, "Times New Roman", serif;
    --font-family-sans:
      "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
      "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  }

  html.dark {
    /* Dark Theme Overrides */
    --bg-color: #121212; /* Slightly off-black */
    --text-color: #e5e5e5;
    --text-muted: #ccc;
    --footer-bg: #161616aa;
    --footer-text: #cccccc;
    --footer-heading: #eeeeee;
    --footer-link: #cccccc;
    --footer-link-hover: #ffffff;
    --footer-copyright: #888888;
    --dynamic-bg-opacity: 0.4; /* Keep original opacity for dark theme */
  }

  html {
    /* Ensure no overscroll rule here */
    background-color: var(--bg-color); /* Use CSS variable */
  }

  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    font-family: var(--font-family-serif);
    color: var(--text-color); /* Apply base text color */
    /* Ensure smooth transitions for color changes */
    transition:
      background-color 0.3s ease,
      color 0.3s ease;
  }

  .page-wrapper {
    height: 100vh;
    overflow-y: auto;
    position: relative; /* Context for absolutely positioned children if needed */
    overscroll-behavior-y: contain;
  }

  .main-content {
    min-height: 100vh;
  }
</style>

<style is:global>
  /* Animation styles moved to global scope */
  .scroll-animate {
    opacity: 0;
    filter: blur(5px);
    transform: translateY(20px);
    /* Promote to own layer to potentially fix Firefox glitches */
    transform: translateZ(0);
    will-change: opacity, filter, transform;
    transition:
      opacity 0.8s ease-out,
      filter 0.8s ease-out,
      transform 0.8s ease-out;
  }

  .scroll-animate.visible {
    opacity: 1;
    filter: blur(0px);
    transform: translateY(0) translateZ(0); /* Keep consistent transform */
  }
</style>
