---
import DynamicBackground from "../components/DynamicBackground.astro";
import ScrollIndicator from "../components/ScrollIndicator.astro";
import Footer from "../components/Footer.astro";

// Define props interface and get the title prop
interface Props {
  title?: string; // Optional title prop
}
const { title } = Astro.props;

// Set a default title if none is provided
const pageTitle = `${title || "Homepage"} | Zheyu Cao`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap"
      rel="stylesheet"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="page-wrapper">
      <DynamicBackground />
      <slot />
      <Footer />
      <ScrollIndicator />
    </div>
  </body>

  <script>
    const pageWrapper = document.querySelector(".page-wrapper");

    const observerOptions = {
      root: pageWrapper, // Observe intersections within the page-wrapper
      rootMargin: "0px",
      threshold: 0.1,
    };

    const observerCallback = (entries, observer) => {
      entries.forEach((entry) => {
        // console.log("Observing:", entry.target, "Is intersecting:", entry.isIntersecting); // Removed debug log
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.unobserve(entry.target);
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);

    const targets = document.querySelectorAll(".scroll-animate");
    // Ensure pageWrapper exists before observing
    if (pageWrapper) {
      targets.forEach((target) => observer.observe(target));
    } else {
      console.error("Page wrapper element not found for IntersectionObserver.");
    }
  </script>
</html>

<style>
  :root {
    --font-family-serif: "EB Garamond", Garamond, "Times New Roman", serif;
    --font-family-sans:
      "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
      "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    color: #2e2e2e;
  }

  html {
    /* Ensure no overscroll rule here */
  }

  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    font-family: var(--font-family-serif);
  }

  .page-wrapper {
    height: 100vh;
    overflow-y: auto;
    position: relative; /* Context for absolutely positioned children if needed */
    overscroll-behavior-y: contain;
  }

  .scroll-animate {
    /* TEMPORARILY DISABLED for debugging About section visibility */
    /*
    opacity: 0;
    filter: blur(5px);
    transform: translateY(20px);
    */
    opacity: 0; /* Restore initial state */
    filter: blur(5px); /* Restore initial state */
    transform: translateY(20px); /* Restore initial state */
    transition:
      opacity 0.8s ease-out,
      filter 0.8s ease-out,
      transform 0.8s ease-out;
  }

  .scroll-animate.visible {
    opacity: 1;
    filter: blur(0px);
    transform: translateY(0);
  }
</style>
